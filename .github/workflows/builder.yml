name: Build base images

on:
  pull_request:
    branches: ["master"]
  release:
    types: ["published"]

env:
  BUILD_TYPE: base
  ALPINE_LATEST: "3.13"
  DEBIAN_LATEST: "buster"
  UBUNTU_LATEST: "20.4"
  RASPBIAN_LATEST: "buster"
  PYTHON_LATEST: "3.9"

jobs:
  init:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      uses: home-assistant/actions/helpers/version@master
      with:
        type: ${{ env.BUILD_TYPE }}
  
  build_alpine:
    name: Build ${{ matrix.arch }} alpine ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "i386", "aarch64", "armv7", "armhf"]
        version: ["3.10", "3.11", "3.12", "3.13"] 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GIT_USER }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.ALPINE_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/alpine \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_debian:
    name: Build ${{ matrix.arch }} debian ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "i386", "aarch64", "armv7", "armhf"]
        version: ["stretch", "buster", "bullseye"] 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GIT_USER }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.DEBIAN_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/debian \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --version-from ${{ matrix.version }}-slim
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_ubuntu:
    name: Build ${{ matrix.arch }} ubuntu ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "aarch64", "armv7"]
        version: ["16.04", "18.04", "20.04"] 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GIT_USER }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.UBUNTU_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/ubuntu \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_raspbian:
    name: Build ${{ matrix.arch }} raspbian ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["armhf"]
        version: ["stretch", "buster", "bullseye"] 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GIT_USER }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.RASPBIAN_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/raspbian \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --version-from ${{ matrix.version }}-slim
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_python:
    name: Build ${{ matrix.arch }} alpine ${{ matrix.version }} - python ${{ matrix.python }} base image
    needs: [init, build_alpine]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "i386", "aarch64", "armv7", "armhf"]
        version: ["3.11", "3.12", "3.13"]
        python: ["3.7", "3.8", "3.9"]
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GIT_USER }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.ALPINE_LATEST != matrix.version || env.PYTHON_LATEST != matrix.python
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target "/data/python/${{ matrix.python }}" \
          --with-codenotary \
          --validate-from home-assistant.io \
          --release ${{ needs.init.outputs.version }} \
          --version-from ${{ matrix.version }} \
          --version ${{ matrix.python }} \
          --base ${{ matrix.python }}_alpine${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}