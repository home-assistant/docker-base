ame: Build base images

on:
  pull_request:
    branches: ["master"]
  release:
    types: ["published"]

env:
  BUILD_TYPE: base
  ALPINE_VERSIONS: ["3.10", "3.11", "3.12", "3.13"]
  ALPINE_LATEST: "3.13"
  DEBIAN_VERSIONS: ["stretch", "buster", "bullseye"]
  DEBIAN_LATEST: "buster"
  UBUNTU_VERSIONS: ["16.04", "18.04", "20.04"]
  UBUNTU_LATEST: "20.4"
  RASPBIAN_VERSIONS: ["stretch", "buster", "bullseye"]
  RASPBIAN_LATEST: "buster"
  PYTHON_ALPINE_VERSIONS: ["3.11", "3.12", "3.13"]
  PYTHON_VESIONS: ["3.7", "3.8", "3.9"]
  PYTHON_LATEST: "3.9"

jobs:
  init:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      architectures_alpine: ${{ steps.info_alpine.outputs.architectures }}
      architectures_debian: ${{ steps.info_debian.outputs.architectures }}
      architectures_ubuntu: ${{ steps.info_ubuntu.outputs.architectures }}
      architectures_raspbian: ${{ steps.info_raspbian.outputs.architectures }}
      architectures_python: ${{ steps.info_python.outputs.architectures }}
      release: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get information Alpine
      id: info_alpine
      uses: home-assistant/actions/helpers/info@master
      with:
        path: "${{ github.workspace }}/alpine"

    - name: Get information Debian
      id: info_debian
      uses: home-assistant/actions/helpers/info@master
      with:
        path: "${{ github.workspace }}/debian"

    - name: Get information Ubuntu
      id: info_ubuntu
      uses: home-assistant/actions/helpers/info@master
      with:
        path: "${{ github.workspace }}/ubuntu"

    - name: Get information Raspbian
      id: info_raspbian
      uses: home-assistant/actions/helpers/info@master
      with:
        path: "${{ github.workspace }}/raspbian"
      
    - name: Get information Python
      id: info_python
      uses: home-assistant/actions/helpers/info@master
      with:
        path: "${{ github.workspace }}/python"

    - name: Get version
      id: version
      uses: home-assistant/actions/helpers/version@master
      with:
        type: ${{ env.BUILD_TYPE }}
  
  build_alpine:
    name: Build ${{ matrix.arch }} alpine ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(needs.init.outputs.architectures_alpine) }}
        version: ${{ env.ALPINE_VERSIONS }} 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_USER }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.ALPINE_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/alpine \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_debian:
    name: Build ${{ matrix.arch }} debian ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(needs.init.outputs.architectures_debian) }}
        version: ${{ env.DEBIAN_VERSIONS }} 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_USER }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.DEBIAN_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/alpine \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --version-from ${{ matrix.version }}-slim
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

build_ubuntu:
    name: Build ${{ matrix.arch }} ubuntu ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(needs.init.outputs.architectures_ubuntu) }}
        version: ${{ env.UBUNTU_VERSIONS }} 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_USER }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.UBUNTU_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/alpine \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_raspbian:
    name: Build ${{ matrix.arch }} raspbian ${{ matrix.version }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(needs.init.outputs.architectures_debian) }}
        version: ${{ env.RASPBIAN_VERSIONS }} 
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_USER }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.RASPBIAN_LATEST != matrix.version
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/alpine \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --version-from ${{ matrix.version }}-slim
          --base ${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}

  build_python:
    name: Build ${{ matrix.arch }} alpine ${{ matrix.version }} - python ${{ matrix.python }} base image
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(needs.init.outputs.architectures_alpine) }}
        version: ${{ env.PYTHON_ALPINE_VERSIONS }}
        python: ${{ env.PYTHON_VERSIONS }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Login to DockerHub
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'release'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_USER }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build arguments
      if: github.event_name != 'release'
      run: echo "BUILD_ARGS=--test" >> $GITHUB_ENV
    
    - name: Set latest tag
      if: env.ALPINE_LATEST != matrix.version || env.PYTHON_LATEST != matrix.python
      run: echo "BUILD_ARGS=--no-latest" >> $GITHUB_ENV

    - name: Build base image
      uses: home-assistant/builder@2021.03.0
      with:
        args: |
          $BUILD_ARGS \
          --${{ matrix.arch }} \
          --target /data/alpine \
          --with-codenotary \
          --release ${{ needs.init.outputs.version }} \
          --version-from ${{ matrix.version }} \
          --version ${{ matrix.python }} \
          --base ${{ matrix.python }}_alpine${{ matrix.version }}
      env:
        VCN_USER: ${{ secrets.VCN_USER }}
        VCN_PASSWORD: ${{ secrets.VCN_PASSWORD }}
        VCN_NOTARIZATION_PASSWORD: ${{ secrets.VCN_PASSWORD }}